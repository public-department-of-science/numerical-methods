function [yy, C] = mycubic10(x, y, xx)
% Вычисление коэффициентов кубического сплайна и его значений в заданных точках

% Входные аргументы
%    x, y – узлы интерполяции
%    xx – значения аргумента, для которых надо вычислить кубический сплайн
%  Выходные аргументы  
%    yy – значения сплайна в xx
%    С – матрица коэффициентов кубических полиномов
%    С = [d(1)      c(1)       b(1)       a1
%            d(2)      c(2)       b(2)       a2 
%             ...
%            d(n-1)   c(n-1)   b(n-1)    a(n-1) ];

% находим число узлов интерполяции
n = length(x);

% преобразуем массивы узлов в вектор-столбцы
x = x(:);
y = y(:);

% находим коэффициенты полиномов, образующих сплайн
[d, c, b, a]  = CalcCoeffs(x, y);
% записываем найденные коэффициенты в матрицу
C = [d c b a];

% создаем нулевой вектор для записи значений сплайна
yy = zeros(size(xx));

% вычисляем значения сплайна
% в цикле проходим по отрезкам между узлами интерполирования
for k = 1:n-1
    % находим индексы элементов массива xx, значения которых 
    % лежат между x(k) и x(k+1)
    ind = find((xx >= x(k)) & (xx<= x(k+1)));
    % вычисляем значения соответствующего полинома
    yy(ind) = a(k) + b(k)*(xx(ind)-x(k)) + ...
        c(k)*(xx(ind)-x(k)).^2 + d(k)*(xx(ind)-x(k)).^3;
end

function [d, c, b, a]  = CalcCoeffs(x, y)
% подфункция для вычисления коэффициентов полиномов кубического сплайна

% находим число узлов
n = length(x);
% вычисляем вектор расстояний между узлами
h = diff(x);
% вычисляем коэффициенты трехдиагональной матрицы
alpha = 1./h(2:n-2);
beta = 2* (1./h(1:n-2) + 1./h(2:n-1));
gamma = 1./h(2:n-2);

% формируем прямоугольный массив с диагоналями, дополняя вектора 
% alpha и  gamma нулями
D3 = [[alpha; 0] beta [0; gamma]];
% формируем трехдиагональную матрицу в компактной форме
A = spdiags(D3, [-1 0 1], n-2, n-2);

% вычисляем правую часть системы
df = diff(y)./h;
delta = 3*(df(2:n-1)./h(2:n-1) + df(1:n-2)./h(1:n-2));

% решаем систему относительно тангенсов углов наклона сплайна в узлах
b = A\delta;

% расширяем полученный вектор, добавляя граничные условия
b = [0; b; 0];
% находим остальные коэффициенты полиномов
a = y(1:n-1);
c = (3*df - b(2:n) - 2*b(1:n-1))./h;
d = (b(1:n-1) + b(2:n) - 2*df)./h.^2;
% удаляем последний элемент вектора b, который содержит тангенс угла наклона в x(n),
% т.к. он не является коэффициентом последнего полинома
b(end) = [];

Проверим работу функции mycubic10, проинтерполировав кубическим сплайном (с нулевыми условиями на первую производную на границах отрезка интерполирования) следующую табличную функцию

>> x = [-4 -3.5 -2  0 2.1 2.5 5];
>> y = [0.5    0.2   -0.7  0    1.1    0.8 -1.6];

Для этого вызываем функцию mycubic10

>> [yy, C] = mycubic10(x, y, xx);

и строим по полученным значениями yy график кубического сплайна, на котором маркерами отложены табличные данные

>> plot(x, y, 'o', xx, yy)
>> xlim([x(1)-0.1 x(end)+0.1])